# import json
# from itertools import combinations  

# import sys
# sys.path.append("/home/v-zhijunjia/valle_23_4_22")
# from valle.data import (
#     ApplyKmeans,
#     HubertFeatureReader
# )


# def depup(semantic_token):
#     unique_tokens = []  
#     for token in semantic_token:  
#         if unique_tokens==[] or token != unique_tokens[-1]:  
#             unique_tokens.append(token)
#     return unique_tokens

# ckpt_path = "/home/v-zhijunjia/models/hubert/hubert_base_ls960.pt"
# layer = 9
# km_path = "/home/v-zhijunjia/models/hubert/hubert_base_ls960_L9_km500.bin"
# reader = HubertFeatureReader(ckpt_path, layer)
# apply_kmeans = ApplyKmeans(km_path)    

# def compute_hubert(wav_path):
#     feat = reader.get_feats(wav_path)
#     lab = apply_kmeans(feat).tolist()
#     return lab

# def longest_common_subsequence(seq1, seq2):  
#     m, n = len(seq1), len(seq2)  
#     dp = [[0] * (n + 1) for _ in range(m + 1)]  
  
#     for i in range(1, m + 1):  
#         for j in range(1, n + 1):  
#             if seq1[i - 1] == seq2[j - 1]:  
#                 dp[i][j] = dp[i - 1][j - 1] + 1  
#             else:  
#                 dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])  
  
#     lcs = []  
#     i, j = m, n  
#     while i > 0 and j > 0:  
#         if seq1[i - 1] == seq2[j - 1]:  
#             lcs.append(seq1[i - 1])  
#             i -= 1  
#             j -= 1  
#         elif dp[i - 1][j] > dp[i][j - 1]:  
#             i -= 1  
#         else:  
#             j -= 1  
  
#     return lcs[::-1]  

# import os
# lst = []
# i=0
# # for root, dirs, files in os.walk("/home/v-zhijunjia/data/test_vc/test_accent_baseline_paper/converted_semantic_vc/test_improve_semantic_9_2_v2"):
# #     for file in files:
# #         file_path = os.path.join(root, file)
# #         lab = compute_hubert(file_path)
# #         lst.append({f'a{i}':lab})
# #         i+=1

# # a, b, c , d= list
# # print(f"len(a), len(b), len(c), len(d):{len(a)}, {len(b)}, {len(c)}, {len(d)}")

# las=0

# a1=[345, 152, 152, 152, 324, 3, 14, 14, 411, 411, 297, 297, 481, 481, 293, 122, 122, 36, 449, 449, 449, 494, 494, 494, 236, 314, 196, 196, 309, 309, 479, 398, 398, 213, 213, 213, 252, 252, 36, 131, 483, 440, 440, 44, 44, 44, 38, 31, 342, 142, 142, 196, 196, 217, 70, 70, 65, 65, 481, 481, 481, 481, 182, 182, 497, 497, 497, 122, 129, 129, 401, 82, 74, 425, 425, 386, 386, 486, 486, 486, 460, 169, 150, 150, 86, 86, 238, 6, 6, 272, 469, 469, 469, 178, 458, 96, 270, 86, 86, 86, 238, 196, 196, 309, 479, 331, 470, 290, 171, 171, 171, 358, 358, 233, 233, 82, 192, 192, 483, 226, 226, 226, 244, 209, 83, 55, 55, 322, 94, 199, 44, 44, 44, 8, 32, 32, 32, 354, 354, 278, 278, 278, 278, 416, 416, 314, 32, 401, 401, 401, 401, 244, 108, 119, 119, 437, 437, 265, 265, 265, 265, 85, 146, 146, 438, 349, 349, 234, 234, 234, 261, 261, 190, 380, 380, 499, 499, 499, 405, 405, 405, 206, 206, 206, 37, 24, 24, 233, 458, 96, 393, 393, 155, 155, 332, 332, 332, 216, 22, 283, 455, 416, 129, 401, 244, 75, 445, 445, 278, 278, 278, 278, 278, 385, 233, 233, 233, 270, 270, 433, 160, 160, 160, 112, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 82, 108, 119, 351, 351, 151, 151, 151, 151, 240, 240, 24, 314, 314, 32, 32, 32, 32, 32, 32, 32, 32]
# a2=[17, 296, 345, 152, 152, 152, 3, 14, 14, 411, 297, 297, 297, 297, 293, 293, 293, 122, 77, 77, 342, 224, 224, 494, 494, 494, 116, 10, 10, 10, 309, 479, 398, 444, 213, 213, 213, 252, 252, 314, 335, 335, 440, 440, 44, 44, 44, 38, 162, 342, 68, 105, 105, 196, 196, 70, 70, 65, 65, 481, 481, 481, 481, 481, 293, 293, 293, 98, 98, 197, 401, 401, 401, 244, 320, 425, 386, 431, 486, 486, 486, 486, 460, 169, 150, 150, 86, 238, 6, 272, 272, 469, 469, 469, 143, 458, 96, 66, 68, 68, 68, 238, 196, 196, 309, 479, 470, 470, 290, 171, 171, 171, 358, 358, 143, 233, 233, 82, 192, 192, 226, 80, 80, 80, 244, 209, 83, 55, 55, 322, 94, 199, 44, 44, 44, 8, 32, 32, 239, 354, 278, 278, 278, 278, 143, 35, 401, 401, 401, 401, 401, 401, 244, 75, 108, 119, 180, 284, 265, 265, 265, 265, 85, 85, 146, 438, 173, 129, 401, 401, 401, 401, 401, 244, 354, 354, 106, 91, 91, 405, 405, 405, 206, 206, 206, 37, 24, 233, 233, 401, 80, 80, 80, 244, 155, 332, 332, 332, 216, 22, 283, 455, 416, 129, 401, 82, 75, 445, 445, 278, 278, 278, 278, 385, 385, 233, 233, 233, 233, 270, 270, 433, 160, 160, 160, 160, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 193, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 401, 401, 401, 401, 244, 244, 244, 75, 108, 119, 351, 351, 151, 151, 151, 240, 240, 314, 314, 32, 401]
# a3=[17, 296, 345, 152, 152, 152, 3, 14, 14, 411, 297, 297, 297, 297, 297, 293, 293, 122, 186, 342, 342, 224, 494, 494, 368, 453, 453, 142, 196, 196, 473, 429, 429, 429, 429, 429, 246, 3, 3, 3, 14, 440, 440, 44, 44, 44, 44, 38, 162, 342, 68, 68, 105, 196, 196, 70, 70, 65, 65, 481, 481, 481, 481, 481, 293, 293, 122, 122, 35, 401, 401, 401, 401, 354, 425, 425, 386, 431, 376, 376, 376, 376, 460, 169, 150, 150, 86, 238, 6, 6, 272, 272, 469, 469, 178, 458, 96, 66, 68, 68, 68, 26, 26, 26, 386, 81, 444, 444, 213, 213, 213, 213, 246, 358, 143, 233, 233, 491, 192, 192, 483, 226, 226, 491, 209, 83, 55, 55, 322, 94, 199, 44, 44, 44, 44, 8, 32, 32, 239, 354, 278, 278, 278, 278, 143, 35, 401, 401, 401, 401, 401, 401, 491, 491, 384, 371, 180, 180, 265, 265, 265, 85, 85, 146, 146, 438, 422, 349, 349, 234, 234, 261, 261, 190, 380, 380, 499, 499, 499, 91, 91, 387, 387, 206, 206, 37, 24, 35, 35, 401, 401, 401, 401, 401, 491, 332, 332, 332, 216, 22, 283, 455, 416, 129, 401, 491, 75, 445, 445, 278, 278, 278, 278, 385, 233, 233, 233, 233, 270, 270, 433, 160, 160, 160, 112, 193, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 193, 193, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 401, 401, 401, 491, 491, 491, 491, 491, 491, 491, 491, 108, 119, 351, 351, 151, 151, 151, 240, 240]
# a4=[17, 345, 152, 152, 152, 3, 3, 14, 14, 411, 411, 297, 481, 481, 481, 293, 293, 122, 122, 36, 36, 449, 449, 494, 494, 494, 236, 10, 217, 217, 473, 65, 213, 213, 213, 213, 246, 252, 252, 325, 335, 483, 440, 440, 253, 253, 253, 253, 31, 54, 9, 142, 221, 196, 217, 70, 70, 65, 65, 481, 481, 481, 481, 481, 293, 293, 497, 122, 122, 129, 401, 401, 74, 425, 425, 386, 386, 431, 486, 486, 486, 460, 460, 169, 150, 150, 86, 86, 238, 6, 272, 469, 469, 469, 143, 458, 96, 270, 54, 86, 86, 238, 196, 196, 309, 479, 331, 470, 290, 171, 171, 171, 171, 358, 143, 233, 233, 82, 192, 483, 226, 226, 226, 244, 209, 83, 55, 55, 446, 94, 199, 44, 44, 44, 8, 32, 32, 32, 354, 354, 278, 278, 278, 278, 416, 143, 401, 401, 401, 401, 401, 401, 244, 75, 108, 119, 437, 437, 284, 265, 265, 265, 85, 85, 146, 438, 215, 129, 401, 401, 401, 401, 354, 190, 380, 380, 499, 499, 91, 405, 405, 405, 206, 206, 206, 37, 24, 233, 233, 401, 401, 80, 80, 80, 244, 244, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 310, 107, 395, 176, 176, 328, 328, 303, 303, 48, 48, 229, 170, 170, 244, 15, 15, 15, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442, 442]
# a5=[17, 345, 152, 152, 152, 3, 14, 14, 411, 297, 297, 297, 297, 297, 293, 293, 122, 35, 36, 449, 224, 494, 494, 494, 236, 314, 196, 196, 309, 479, 398, 398, 213, 213, 213, 213, 252, 252, 325, 335, 440, 440, 44, 44, 44, 44, 38, 162, 54, 482, 105, 105, 196, 196, 70, 70, 65, 65, 481, 481, 481, 481, 293, 293, 497, 497, 122, 129, 129, 401, 401, 82, 74, 425, 386, 386, 431, 486, 486, 486, 460, 460, 169, 150, 150, 86, 238, 6, 6, 272, 469, 469, 469, 178, 458, 96, 96, 86, 86, 238, 6, 196, 196, 479, 331, 470, 470, 290, 171, 171, 171, 358, 358, 143, 233, 458, 192, 192, 483, 226, 226, 226, 491, 209, 83, 55, 55, 322, 94, 199, 44, 44, 44, 44, 8, 32, 32, 239, 354, 278, 278, 278, 278, 416, 143, 35, 401, 401, 401, 401, 401, 491, 108, 119, 119, 351, 437, 265, 265, 265, 85, 85, 146, 146, 438, 422, 349, 349, 234, 234, 234, 261, 190, 380, 380, 499, 499, 405, 405, 405, 405, 206, 206, 206, 37, 24, 24, 24, 233, 96, 393, 393, 155, 155, 332, 332, 332, 216, 22, 283, 455, 416, 129, 401, 82, 445, 445, 278, 278, 278, 120, 120, 385, 233, 233, 233, 233, 270, 270, 433, 433, 160, 160, 112, 193, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 17, 193, 193, 193, 193, 193, 193, 193, 193, 193, 17, 17, 17, 17, 17, 17, 17, 17, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 401, 491, 491, 108]
# lst.append({'a1':a1[:228]})
# lst.append({'a2':a2[:228]})
# lst.append({'a3':a3[:228]})
# lst.append({'a4':a4[:228]})
# lst.append({'a5':a5[:228]})
# # semantic_depup = False
# # for xx in list:
# #     if semantic_depup is True:
# #         xx = depup(xx)
# #         print(xx)
# #     print(f"len(xx:{len(xx)})")

# #     if las != 0:
# #         las = longest_common_subsequence(las, xx)
# #         print(f"len(longest_common_subsequence):{len(las)}")
# #     else:
# #         las=xx
# # print(las)
# semantic_depup = True
# for xx in lst:
#     if semantic_depup is True:
#         xx[list(xx.keys())[0]] = depup(list(xx.values())[0])
#     print(f"{list(xx.keys())[0]} len(:{len(list(xx.values())[0])})")

# longest_lcs = []
# def print_all_lcs_in_list(input_list):  
#     for a, b in combinations(input_list, 2):  
#         lcs = longest_common_subsequence(list(a.values())[0], list(b.values())[0])  
#         # lcs = longest_common_subsequence(a.values(), b.values())  
#         print("最长公共子序列长度：", len(lcs))  
#         longest_lcs.append(len(lcs))
#         print("对应的两个列表：", list(a.keys())[0], list(b.keys())[0])  
#         print("------------------------------")
  
# # 示例列表  
  
# # 计算并打印列表中所有两两组合的最长公共子序列  
# print_all_lcs_in_list(lst) 

def average(lst):  
    return sum(lst) / len(lst)
longest_lcs = [135,141,145,141,136]
avg = average(longest_lcs)  
print("平均值：", avg)  

# a, b, c , d, e= list_new
# print(f"len(a), len(b), len(c), len(d):{len(a)}, {len(b)}, {len(c)}, {len(d)}")

# lcs = longest_common_subsequence(a, b)
# ab =lcs
# print(f"a,b longest_common_subsequence len:{len(lcs)}")
# lcs = longest_common_subsequence(b, c)
# print(f"b,c longest_common_subsequence len:{len(lcs)}")
# lcs = longest_common_subsequence(c, d)
# print(f"c,d longest_common_subsequence len:{len(lcs)}")

# abc = longest_common_subsequence(ab, c)
# print(f"a, b, c longest_common_subsequence len:{len(abc)}")
# abcd = longest_common_subsequence(abc, d)
# print(f"a, b, c,d longest_common_subsequence len:{len(abcd)}")




